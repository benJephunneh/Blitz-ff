generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  firstname       String
  lastname        String
  companyname     String?
  displayname     String
  email           String
  phone           String
  locations       Location[]
  locationStashes LocationStash[]
  jobs            Job[]
  jobStashes      JobStash[]
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  notes           String?
}

model CustomerStash {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firstname   String?
  lastname    String?
  companyname String?
  displayname String?
  email       String[]
  phone       String[]
  stashType   StashType @default(Customer)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  notes       String
}

model Location {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  primary      Boolean      @default(true)
  house        String?
  street       String
  city         String
  state        String       @default("FL")
  zipcode      String
  phones       String
  block        String?
  lot          String?
  parcel       String?
  locationType LocationType @default(Personal)
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   Int
  jobs         Job[]
  jobStashes   JobStash[]
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  notes        String?
}

model LocationStash {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  primary      Boolean      @default(true)
  house        String?
  street       String?
  city         String?
  state        String?      @default("FL")
  zipcode      String?
  phones       String?
  block        String?
  lot          String?
  parcel       String?
  locationType LocationType @default(Personal)
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   Int
  stashType    StashType    @default(Location)
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  notes        String
}

model Job {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  start             DateTime?
  end               DateTime?
  completed         Boolean           @default(false)
  customer          Customer          @relation(fields: [customerId], references: [id])
  customerId        Int
  locationId        Int
  location          Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id])
  userId            Int
  notes             String?
  invoices          Invoice[]
  invoiceStashes    InvoiceStash[]
  archivedInvoices  InvoiceArchive[]
  estimates         Estimate[]
  estimateStashes   EstimateStash[]
  archivedEstimates EstimateArchive[]
  // Show warranty on customer page, calculated from date of completion.
}

model JobStash {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String?
  start      DateTime?
  end        DateTime?
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int
  stashType  StashType @default(Location)
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  notes      String
}

model Invoice {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  lineItems LineItem[]
  paid      Boolean    @default(false)
  job       Job        @relation(fields: [jobId], references: [id])
  jobId     Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  notes     String?
}

model InvoiceStash {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  lineItems LineItem[]
  job       Job        @relation(fields: [jobId], references: [id])
  jobId     Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  notes     String
}

model Estimate {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  job       Job        @relation(fields: [jobId], references: [id])
  jobId     Int
  lineItems LineItem[]
  total     Int        @default(0)
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}

model EstimateStash {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  job       Job        @relation(fields: [jobId], references: [id])
  jobId     Int
  lineItems LineItem[]
  total     Int        @default(0)
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}

model EstimateTemplate {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  lineItems LineItem[]
  total     Int
}

model LineItem {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String
  cost              Int?
  quantity          Int                @default(1)
  notes             String?
  invoices          Invoice[]
  invoiceStashes    InvoiceStash[]
  archivedInvoices  InvoiceArchive[]
  Estimate          Estimate[]
  EstimateStash     EstimateStash[]
  EstimateTemplate  EstimateTemplate[]
  EstimateArchive   EstimateArchive[]
  lineItemTemplates LineItemTemplate[]
}

model LineItemTemplate {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  lineItems LineItem[]
  cost      Int
  notes     String
}

model CustomerArchive {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  firstname         String?
  lastname          String?
  companyname       String?
  displayname       String
  email             String
  phone             String
  notes             String?
  archivedLocations LocationArchive[]
  archivedJobs      JobArchive[]
}

model LocationArchive {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  primary          Boolean         @default(true)
  house            String?
  street           String
  city             String
  state            String          @default("FL")
  zipcode          String
  phones           String
  block            String?
  lot              String?
  parcel           String?
  notes            String?
  locationType     LocationType    @default(Personal)
  archivedCustomer CustomerArchive @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       Int
  archivedJobs     JobArchive[]
}

model JobArchive {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  start             DateTime?
  end               DateTime?
  customerId        Int
  locationId        Int
  notes             String?
  archivedCustomer  CustomerArchive   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  archivedLocation  LocationArchive   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  archivedInvoices  InvoiceArchive[]
  archivedEstimates EstimateArchive[]
}

model InvoiceArchive {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  lineItems    LineItem[]
  paid         Boolean
  job          Job?        @relation(fields: [jobId], references: [id])
  jobId        Int
  jobArchive   JobArchive? @relation(fields: [jobArchiveId], references: [id])
  jobArchiveId Int
  notes        String?
}

model EstimateArchive {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  job          Job?        @relation(fields: [jobId], references: [id])
  jobArchive   JobArchive? @relation(fields: [jobArchiveId], references: [id])
  lineItems    LineItem[]
  total        Int         @default(0)
  jobId        Int?
  jobArchiveId Int?
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  username        String          @unique
  email           String          @unique
  hashedPassword  String?
  role            UserRole        @default(Tech)
  customers       Customer[]
  locations       Location[]
  jobs            Job[]
  invoices        Invoice[]
  customerStashes CustomerStash[]
  locationStashes LocationStash[]
  jobStashes      JobStash[]
  invoiceStashes  InvoiceStash[]
  sessions        Session[]
  tokens          Token[]
  Estimate        Estimate[]
  EstimateStash   EstimateStash[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

enum CustomerType {
  Owner
  Manager
  Realtor
  Builder
}

enum EmailType {
  Personal
  Business
}

enum PhoneType {
  Primary
  Secondary
  Office
}

enum Permit {
  None
  PendingNotPaid
  PendingPaid
  Received
  Active
  Expired
}

enum StashType {
  Customer
  Location
  Job
  Invoice
  Estimate
}

enum LocationType {
  Personal
  Business
  Managed
}

enum UserRole {
  Owner
  Admin
  Tech
}

enum TokenType {
  RESET_PASSWORD
}
