generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  firstname   String?
  lastname    String?
  companyname String?
  displayname String
  email       String
  locations   Location[]
}

model CustomerStash {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firstname   String?
  lastname    String?
  companyname String?
  displayname String?
  email       String?
  notes       String
  userId      Int
  stashType   StashType @default(Customer)
  user        User      @relation(fields: [userId], references: [id])
}

model Location {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  primary    Boolean      @default(true)
  house      String?
  street     String
  city       String
  state      String       @default("FL")
  zipcode    String
  phones     String
  block      String?
  lot        String?
  parcel     String?
  type       LocationType @default(Personal)
  customer   Customer     @relation(fields: [customerId], references: [id])
  customerId Int
  jobs       Job[]
}

model Job {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  start      DateTime?
  end        DateTime?
  locationId Int
  location   Location  @relation(fields: [locationId], references: [id])
}

model CustomerArchive {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  firstname         String?
  lastname          String?
  companyname       String?
  displayname       String
  email             String
  archivedLocations LocationArchive[]
}

model LocationArchive {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  primary          Boolean         @default(true)
  house            String?
  street           String
  city             String
  state            String          @default("FL")
  zipcode          String
  phones           String
  block            String?
  lot              String?
  parcel           String?
  customerId       Int
  archivedCustomer CustomerArchive @relation(fields: [customerId], references: [id])
  archivedJobs     JobArchive[]
}

model JobArchive {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  title            String
  start            DateTime?
  end              DateTime?
  locationId       Int
  archivedLocation LocationArchive @relation(fields: [locationId], references: [id])
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  username        String          @unique
  email           String          @unique
  hashedPassword  String?
  role            UserRole        @default(Tech)
  customerStashes CustomerStash[]
  sessions        Session[]
  tokens          Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

enum CustomerType {
  Owner
  Manager
  Realtor
  Builder
}

enum EmailType {
  Personal
  Business
}

enum PhoneType {
  Primary
  Secondary
  Office
}

enum Permit {
  None
  PendingNotPaid
  PendingPaid
  Received
  Active
  Expired
}

enum StashType {
  Customer
  Location
  Job
  Invoice
  Estimate
}

enum LocationType {
  Personal
  Business
  Managed
}

enum UserRole {
  Owner
  Admin
  Tech
}

enum TokenType {
  RESET_PASSWORD
}
